{"version":3,"sources":["components/Scores/Scores.js","components/Images/Images.js","App.js","serviceWorker.js","index.js"],"names":["Scores","props","current","best","images","src","pic","alt","onClick","clicked","middleMessage","App","state","imgURL","whenClicked","index","resetArray","i","length","console","log","setState","array","tempArray","rnd","Math","floor","random","push","splice","className","id","this","map","image","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySASeA,MAPf,SAAgBC,GACZ,OACI,qCAAWA,EAAMC,QAAjB,iBAAwCD,EAAME,O,MCKvCC,MANf,SAAgBH,GACR,OACI,yBAAKI,IAAKJ,EAAMK,IAAKC,IAAI,OAAOC,QAASP,EAAMQ,WCAvDP,EAAU,EACVC,EAAO,EACPO,EAAgB,2BAgHLC,E,2MA5GbC,MAAQ,CACNR,OAAQ,CACN,CACES,OAAQ,qBAAsBJ,SAAS,GAEzC,CACEI,OAAQ,qBAAsBJ,SAAS,GAEzC,CACEI,OAAQ,qBAAsBJ,SAAS,GAEzC,CACEI,OAAQ,qBAAsBJ,SAAS,GAEzC,CACEI,OAAQ,qBAAsBJ,SAAS,GAEzC,CACEI,OAAQ,qBAAsBJ,SAAS,GAEzC,CACEI,OAAQ,qBAAsBJ,SAAS,GAEzC,CACEI,OAAQ,qBAAsBJ,SAAS,GAEzC,CACEI,OAAQ,qBAAsBJ,SAAS,GAEzC,CACEI,OAAQ,qBAAsBJ,SAAS,GAEzC,CACEI,OAAQ,qBAAsBJ,SAAS,GAEzC,CACEI,OAAQ,qBAAsBJ,SAAS,K,EAK7CK,YAAc,SAACC,GACb,GAAK,EAAKH,MAAMR,OAAOW,GAAON,QAevB,CACLC,EAAgB,2BAEhB,IADA,IAAIM,EAAa,EAAKJ,MAAMR,OACpBa,EAAI,EAAGA,EAAED,EAAWE,OAAQD,IAClCD,EAAWC,GAAGR,SAAU,EAE1BP,EAAU,EACViB,QAAQC,IAAIJ,GACZ,EAAKK,SAAS,CAACjB,OAAQY,QAvBc,CAErCN,EAAgB,2BADhBR,EAEYC,IACVA,EAAOD,GAET,IAAIoB,EAAQ,EAAKV,MAAMR,OACvBkB,EAAMP,GAAON,SAAU,EAEvB,IADA,IAAIc,EAAY,GACTD,EAAMJ,OAAS,GAAG,CACvB,IAAIM,EAAMC,KAAKC,MAAMD,KAAKE,SAAWL,EAAMJ,QAC3CK,EAAUK,KAAKN,EAAME,IACrBF,EAAMO,OAAOL,EAAK,GAEpB,EAAKH,SAAS,CAAEjB,OAAQmB,M,wEAalB,IAAD,OACP,OACE,yBAAKO,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,iBACb,2CAEF,yBAAKA,UAAU,mBACb,uBAAGC,GAAG,SAASrB,IAEjB,yBAAKoB,UAAU,kBACb,yBAAKA,UAAU,UAAS,kBAAC,EAAD,CAAQ5B,QAASA,EAASC,KAAMA,QAI9D,yBAAK2B,UAAU,aACb,uBAAGA,UAAU,eAAb,gBACA,uBAAGA,UAAU,gBAAb,iFAEF,6BAAS,6BACT,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,mBACZE,KAAKpB,MAAMR,OAAO6B,IAAI,SAACC,EAAOnB,GAC7B,OAAO,kBAAC,EAAD,CACLN,QAAS,kBAAM,EAAKK,YAAYC,IAChCT,IAAK4B,EAAMrB,OACXsB,IAAKpB,OAIX,yBAAKe,UAAU,mB,GAvGPM,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ae258a2f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Scores(props) {\r\n    return (\r\n        <p>Score: {props.current} | Top Score: {props.best}</p>\r\n    );\r\n};\r\n\r\n\r\nexport default Scores;","import React from 'react';\r\nimport \"./Images.css\";\r\n\r\nfunction images(props) {\r\n        return (\r\n            <img src={props.pic} alt=\"oops\" onClick={props.clicked}/>\r\n        )\r\n};\r\n\r\nexport default images;","import React, { Component } from 'react';\nimport './App.css';\nimport Scores from './components/Scores/Scores'\nimport Images from './components/Images/Images'\n\nlet current = 0;\nlet best = 0;\nlet middleMessage = \"Click an image to begin!\"\n\nclass App extends Component {\n\n  state = {\n    images: [\n      {\n        imgURL: './images/img01.jpg', clicked: false\n      },\n      {\n        imgURL: './images/img02.jpg', clicked: false\n      },\n      {\n        imgURL: './images/img03.jpg', clicked: false\n      },\n      {\n        imgURL: './images/img04.jpg', clicked: false\n      },\n      {\n        imgURL: './images/img05.jpg', clicked: false\n      },\n      {\n        imgURL: './images/img06.jpg', clicked: false\n      },\n      {\n        imgURL: './images/img07.jpg', clicked: false\n      },\n      {\n        imgURL: './images/img08.jpg', clicked: false\n      },\n      {\n        imgURL: './images/img09.jpg', clicked: false\n      },\n      {\n        imgURL: './images/img10.jpg', clicked: false\n      },\n      {\n        imgURL: './images/img11.jpg', clicked: false\n      },\n      {\n        imgURL: './images/img12.jpg', clicked: false\n      },\n    ]\n  }\n\n  whenClicked = (index) => {\n    if (!this.state.images[index].clicked) {\n      current++;\n      middleMessage = \"You guessed Correctly!\";\n      if (current>best) {\n        best = current;\n      }\n      let array = this.state.images\n      array[index].clicked = true;\n      let tempArray = [];\n      while (array.length > 0) {\n        let rnd = Math.floor(Math.random() * array.length);\n        tempArray.push(array[rnd]);\n        array.splice(rnd, 1);\n      }\n      this.setState({ images: tempArray });\n    } else {\n      middleMessage = \"You guessed incorrectly!\"\n      let resetArray = this.state.images;\n      for(let i = 0; i<resetArray.length; i++) {\n        resetArray[i].clicked = false;\n      }\n      current = 0;\n      console.log(resetArray);\n      this.setState({images: resetArray});\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"row\">\n            <div className=\"col-md-4 left\">\n              <p>Clicky Game</p>\n            </div>\n            <div className=\"col-md-4 middle\">\n              <p id=\"start\">{middleMessage}</p>\n            </div>\n            <div className=\"col-md-4 right\">\n              <div className=\"scores\"><Scores current={current} best={best} /></div>\n            </div>\n          </div>\n        </header>\n        <div className=\"bigBanner\">\n          <p className=\"bannerTitle\">Clicky Game!</p>\n          <p className=\"instructions\">Click on an image to earn points, but don't click on any one more than once.</p>\n        </div>\n        <br></br><br></br>\n        <div className=\"row\">\n          <div className=\"col-md-2\"></div>\n          <div className=\"col-md-8 images\">\n            {this.state.images.map((image, index) => {\n              return <Images\n                clicked={() => this.whenClicked(index)}\n                pic={image.imgURL}\n                key={index}\n              />;\n            })}\n          </div>\n          <div className=\"col-md-2\"></div>\n        </div>\n      </div>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}