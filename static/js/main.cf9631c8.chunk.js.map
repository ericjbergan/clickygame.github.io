{"version":3,"sources":["components/Scores/Scores.js","components/Images/Images.js","App.js","serviceWorker.js","index.js"],"names":["Scores","props","current","best","images","src","pic","alt","onClick","clicked","middleMessage","App","state","imgURL","whenClicked","index","resetArray","i","length","console","log","setState","array","tempArray","rnd","Math","floor","random","push","splice","className","id","this","map","image","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySASeA,MAPf,SAAgBC,GACZ,OACI,qCAAWA,EAAMC,QAAjB,iBAAwCD,EAAME,O,MCKvCC,MANf,SAAgBH,GACR,OACI,yBAAKI,IAAKJ,EAAMK,IAAKC,IAAI,OAAOC,QAASP,EAAMQ,WCAvDP,EAAU,EACVC,EAAO,EACPO,EAAgB,2BAgHLC,E,2MA5GbC,MAAQ,CACNR,OAAQ,CACN,CACES,OAAQ,qBAAsBJ,SAAS,GAEzC,CACEI,OAAQ,qBAAsBJ,SAAS,GAEzC,CACEI,OAAQ,qBAAsBJ,SAAS,GAEzC,CACEI,OAAQ,qBAAsBJ,SAAS,GAEzC,CACEI,OAAQ,qBAAsBJ,SAAS,GAEzC,CACEI,OAAQ,qBAAsBJ,SAAS,GAEzC,CACEI,OAAQ,qBAAsBJ,SAAS,GAEzC,CACEI,OAAQ,qBAAsBJ,SAAS,GAEzC,CACEI,OAAQ,qBAAsBJ,SAAS,GAEzC,CACEI,OAAQ,qBAAsBJ,SAAS,GAEzC,CACEI,OAAQ,qBAAsBJ,SAAS,GAEzC,CACEI,OAAQ,qBAAsBJ,SAAS,K,EAK7CK,YAAc,SAACC,GACb,GAAK,EAAKH,MAAMR,OAAOW,GAAON,QAevB,CACLC,EAAgB,2BAEhB,IADA,IAAIM,EAAa,EAAKJ,MAAMR,OACpBa,EAAI,EAAGA,EAAED,EAAWE,OAAQD,IAClCD,EAAWC,GAAGR,SAAU,EAE1BP,EAAU,EACViB,QAAQC,IAAIJ,GACZ,EAAKK,SAAS,CAACjB,OAAQY,QAvBc,CAErCN,EAAgB,2BADhBR,EAEYC,IACVA,EAAOD,GAET,IAAIoB,EAAQ,EAAKV,MAAMR,OACvBkB,EAAMP,GAAON,SAAU,EAEvB,IADA,IAAIc,EAAY,GACTD,EAAMJ,OAAS,GAAG,CACvB,IAAIM,EAAMC,KAAKC,MAAMD,KAAKE,SAAWL,EAAMJ,QAC3CK,EAAUK,KAAKN,EAAME,IACrBF,EAAMO,OAAOL,EAAK,GAEpB,EAAKH,SAAS,CAAEjB,OAAQmB,M,wEAalB,IAAD,OACP,OACE,yBAAKO,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,iBACb,2CAEF,yBAAKA,UAAU,mBACb,uBAAGC,GAAG,SAASrB,IAEjB,yBAAKoB,UAAU,kBACb,yBAAKA,UAAU,UAAS,kBAAC,EAAD,CAAQ5B,QAASA,EAASC,KAAMA,QAI9D,yBAAK2B,UAAU,aACb,uBAAGA,UAAU,eAAb,gBACA,uBAAGA,UAAU,gBAAb,iFAEF,6BAAS,6BACT,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,mBACZE,KAAKpB,MAAMR,OAAO6B,IAAI,SAACC,EAAOnB,GAC7B,OAAO,kBAAC,EAAD,CACLN,QAAS,kBAAM,EAAKK,YAAYC,IAChCT,IAAK4B,EAAMrB,OACXsB,IAAKpB,OAIX,yBAAKe,UAAU,mB,GAvGPM,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cf9631c8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Scores(props) {\r\n    return (\r\n        <p>Score: {props.current} | Top Score: {props.best}</p>\r\n    );\r\n};\r\n\r\n\r\nexport default Scores;","import React from 'react';\r\nimport \"./Images.css\";\r\n\r\nfunction images(props) {\r\n        return (\r\n            <img src={props.pic} alt=\"oops\" onClick={props.clicked}/>\r\n        )\r\n};\r\n\r\nexport default images;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Scores from './components/Scores/Scores'\r\nimport Images from './components/Images/Images'\r\n\r\nlet current = 0;\r\nlet best = 0;\r\nlet middleMessage = \"Click an image to begin!\"\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    images: [\r\n      {\r\n        imgURL: './images/img01.jpg', clicked: false\r\n      },\r\n      {\r\n        imgURL: './images/img02.jpg', clicked: false\r\n      },\r\n      {\r\n        imgURL: './images/img03.jpg', clicked: false\r\n      },\r\n      {\r\n        imgURL: './images/img04.jpg', clicked: false\r\n      },\r\n      {\r\n        imgURL: './images/img05.jpg', clicked: false\r\n      },\r\n      {\r\n        imgURL: './images/img06.jpg', clicked: false\r\n      },\r\n      {\r\n        imgURL: './images/img07.jpg', clicked: false\r\n      },\r\n      {\r\n        imgURL: './images/img08.jpg', clicked: false\r\n      },\r\n      {\r\n        imgURL: './images/img09.jpg', clicked: false\r\n      },\r\n      {\r\n        imgURL: './images/img10.jpg', clicked: false\r\n      },\r\n      {\r\n        imgURL: './images/img11.jpg', clicked: false\r\n      },\r\n      {\r\n        imgURL: './images/img12.jpg', clicked: false\r\n      },\r\n    ]\r\n  }\r\n\r\n  whenClicked = (index) => {\r\n    if (!this.state.images[index].clicked) {\r\n      current++;\r\n      middleMessage = \"You guessed Correctly!\";\r\n      if (current>best) {\r\n        best = current;\r\n      }\r\n      let array = this.state.images\r\n      array[index].clicked = true;\r\n      let tempArray = [];\r\n      while (array.length > 0) {\r\n        let rnd = Math.floor(Math.random() * array.length);\r\n        tempArray.push(array[rnd]);\r\n        array.splice(rnd, 1);\r\n      }\r\n      this.setState({ images: tempArray });\r\n    } else {\r\n      middleMessage = \"You guessed incorrectly!\"\r\n      let resetArray = this.state.images;\r\n      for(let i = 0; i<resetArray.length; i++) {\r\n        resetArray[i].clicked = false;\r\n      }\r\n      current = 0;\r\n      console.log(resetArray);\r\n      this.setState({images: resetArray});\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4 left\">\r\n              <p>Clicky Game</p>\r\n            </div>\r\n            <div className=\"col-md-4 middle\">\r\n              <p id=\"start\">{middleMessage}</p>\r\n            </div>\r\n            <div className=\"col-md-4 right\">\r\n              <div className=\"scores\"><Scores current={current} best={best} /></div>\r\n            </div>\r\n          </div>\r\n        </header>\r\n        <div className=\"bigBanner\">\r\n          <p className=\"bannerTitle\">Clicky Game!</p>\r\n          <p className=\"instructions\">Click on an image to earn points, but don't click on any one more than once.</p>\r\n        </div>\r\n        <br></br><br></br>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-2\"></div>\r\n          <div className=\"col-md-8 images\">\r\n            {this.state.images.map((image, index) => {\r\n              return <Images\r\n                clicked={() => this.whenClicked(index)}\r\n                pic={image.imgURL}\r\n                key={index}\r\n              />;\r\n            })}\r\n          </div>\r\n          <div className=\"col-md-2\"></div>\r\n        </div>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}